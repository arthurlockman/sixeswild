buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
    }
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
version = '1.0'

mainClassName = "application.BuilderLauncher"

task builderStartScript(type: CreateStartScripts) {
    description "Creates OS specific scripts to call the 'builder' entry point"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'application.BuilderLauncher'
    applicationName = 'builder'
}

task playerStartScript(type: CreateStartScripts) {
    description "Creates OS specific scripts to call the 'player' entry point"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'application.PlayerLauncher'
    applicationName = 'player'
}

task(player, dependsOn: playerStartScript, type: JavaExec ) {
    main = 'application.PlayerLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

task(builder, dependsOn: builderStartScript, type: JavaExec ) {
    main = 'application.BuilderLauncher'
    classpath = sourceSets.main.runtimeClasspath
}

distZip {
    baseName = archivesBaseName
    into("${baseName}-${version}-${'builder'}/bin") {
        from builderStartScript
        fileMode = 0755
    }
    into("${baseName}-${version}-${'player'}/bin") {
        from playerStartScript
        fileMode = 0755
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.easytesting', name: 'fest-swing-junit', version: '1.2.1'
    compile fileTree(dir: 'lib', include: ['*.jar'])
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/intellij/**')
        })
    }
}

test.dependsOn 'clean'
test.mustRunAfter 'clean'

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.testRuntime - configurations.runtime
}
