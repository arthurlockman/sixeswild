package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import model.Tile;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class SquareViewPanel
{
    private JPanel squarePanel;
    private JLabel squareNumber;
    private JLabel multiplierLabel;
    private Tile currentTile;

    public SquareViewPanel()
    {
        this.currentTile = new Tile(3, 1);
    }

    public SquareViewPanel(Tile t)
    {
        this.currentTile = t;
    }

    private void createUIComponents()
    {
        // TODO: place custom component creation code here
        squarePanel = new JPanel();
        squareNumber = new JLabel();
        multiplierLabel = new JLabel();
        if (currentTile == null)
            this.currentTile = new Tile(1 + (int) (Math.random() * 6), 1 + (int) (Math.random() * 3));
        switch (currentTile.getValue())
        {
            case 1:
                squarePanel.setBackground(new Color(99, 189, 179)); //1
                break;
            case 2:
                squarePanel.setBackground(new Color(207, 169, 102)); //2
                break;
            case 3:
                squarePanel.setBackground(new Color(86, 95, 182)); //3
                multiplierLabel.setForeground(new Color(255, 255, 255));
                squareNumber.setForeground(new Color(255, 255, 255));
                break;
            case 4:
                squarePanel.setBackground(new Color(91, 44, 125)); //4
                multiplierLabel.setForeground(new Color(255, 255, 255));
                squareNumber.setForeground(new Color(255, 255, 255));
                break;
            case 5:
                squarePanel.setBackground(new Color(120, 0, 50)); //5
                multiplierLabel.setForeground(new Color(255, 255, 255));
                squareNumber.setForeground(new Color(255, 255, 255));
                break;
            case 6:
                squarePanel.setBackground(new Color(65, 0, 50)); //6
                multiplierLabel.setForeground(new Color(255, 255, 255));
                squareNumber.setForeground(new Color(255, 255, 255));
                break;
            default:
                squarePanel.setBackground(new Color(65, 0, 50)); //6
                multiplierLabel.setForeground(new Color(255, 255, 255));
                squareNumber.setForeground(new Color(255, 255, 255));
                break;
        }

        squareNumber.setText("" + currentTile.getValue());
        if (currentTile.getMultiplier() != 1)
            multiplierLabel.setText(currentTile.getMultiplier() + "x");
        else
            multiplierLabel.setText("");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        squarePanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        squarePanel.setMinimumSize(new Dimension(50, 50));
        squarePanel.setPreferredSize(new Dimension(50, 50));
        squareNumber.setHorizontalAlignment(0);
        squareNumber.setHorizontalTextPosition(0);
        squarePanel.add(squareNumber, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(25, 25), null, 0, false));
        multiplierLabel.setHorizontalAlignment(4);
        multiplierLabel.setHorizontalTextPosition(4);
        squarePanel.add(multiplierLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return squarePanel;
    }
}
