package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * Created by David on 4/28/2015.
 */
public class BuilderInstructionViewPanel {
    private JPanel instructionsViewPanel;
    private JButton backButton;
    private JPanel Panel;
    private JPanel builderInstructionsPanel;
    private JTextArea textArea1;

    public BuilderInstructionViewPanel() {
        backButton.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                JPanel parent = (JPanel) builderInstructionsPanel.getParent();
                CardLayout layout = (CardLayout) parent.getLayout();
                layout.show(parent, "menuPanel");
                JFrame topLevelFrame = (JFrame) SwingUtilities.getAncestorOfClass(JFrame.class, builderInstructionsPanel);
            }
        });


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        builderInstructionsPanel = new JPanel();
        builderInstructionsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Panel = new JPanel();
        Panel.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        Panel.setBackground(new Color(-3167898));
        builderInstructionsPanel.add(Panel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        Panel.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel1, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setMaximumSize(new Dimension(360, 575));
        label1.setMinimumSize(new Dimension(360, 575));
        label1.setPreferredSize(new Dimension(360, 575));
        label1.setText("<html><body style = 'width: 370px; padding: 5px;'>Welcome to Sixes Wild!<br><br>Here's how to play:<br><br>When you load a level, you will see a board with 81 squares. The squares will either be active or inactive. You earn points by connecting active squares, but be careful - inactive squares are barriers and cannot be selected.<br><br>Each active square contains a number and a multiplier. The score you earn from a basic move is determined by the following equation:  move points = [sum of numbers] x [product of multipliers] x 10.<br><br>When you make a move, the squares you selected will disappear and new tiles will fall down to replace them. Moves are only valid if the sum of the selected squares equals 6, but squares that have the number 6 cannot be removed!<br><br>Levels are won by reaching a certain number of total points and meeting another special level requirement. For all levels, you can achieve 1-star, 2-star, and 3-star victories depending on how many points you earn. The special level requirement will depend on what type of level you are playing:  Lightning, Puzzle, Elimination, or Release.<br><br>In a Lightning level, you must win at least one star before the timer runs out. Puzzle levels, on the other hand, give you a limited number of moves with which to play. In an Elimination level, you have to perform a basic move on every active square in the board. And in Release levels, you need to fill every \"bucket\" with a square that has the number 6.<br><br>Sixes Wild has three special moves:  Swap, Remove, and Reset. Swap allows you to swap the positions of two neighboring squares, Remove allows you to delete a square from the board, and Reset allows you to reset the entire game board. Special moves can help you win the game, but use your special moves strategically - you only have a few of them.<br><br>Good luck!</html>");
        scrollPane1.setViewportView(label1);
        final JLabel label2 = new JLabel();
        label2.setText("Instructions");
        Panel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        Panel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        Panel.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return builderInstructionsPanel;
    }
}
